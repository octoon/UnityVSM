#pragma kernel AllocateAllPages

#include "../Include/VSMCommon.hlsl"

RWTexture2DArray<uint> _VirtualPageTable;
RWStructuredBuffer<uint4> _PhysicalPageTable;

[numthreads(8, 8, 1)]
void AllocateAllPages(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= VSM_PAGE_TABLE_RESOLUTION || id.y >= VSM_PAGE_TABLE_RESOLUTION || id.z >= VSM_CASCADE_COUNT)
        return;

    // Calculate linear page index
    uint pageIndex = id.z * VSM_PAGE_TABLE_RESOLUTION * VSM_PAGE_TABLE_RESOLUTION +
                     id.y * VSM_PAGE_TABLE_RESOLUTION + id.x;

    // Limit to available physical pages
    if (pageIndex >= 2048) // MAX_PHYSICAL_PAGES
        return;

    // Calculate physical page coordinates (64 columns x 32 rows = 2048 pages)
    uint physicalX = pageIndex % 64;
    uint physicalY = pageIndex / 64;

    // Pack page entry: allocated + visible + dirty
    uint pageEntry = PackPageEntry(true, true, true, int2(physicalX, physicalY));

    // Write to page table (no offset, direct mapping)
    _VirtualPageTable[id] = pageEntry;

    // Update physical page table (store virtual coords and allocated flag)
    _PhysicalPageTable[pageIndex] = uint4(id.x, id.y, id.z, 1);
}
