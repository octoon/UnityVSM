#pragma kernel TestReconstruction

float4x4 _CameraInverseViewProjection;
uint _ScreenWidth;
uint _ScreenHeight;
Texture2D<float> _CameraDepthTexture;

// Output: reconstructed world positions
RWStructuredBuffer<float3> _ReconstructedPositions;

float3 ReconstructWorldPosition(float2 uv, float depth)
{
    float4 clipPos = float4(uv * 2.0 - 1.0, depth, 1.0);
    clipPos.y = -clipPos.y;  // Flip Y for Unity
    float4 worldPos = mul(_CameraInverseViewProjection, clipPos);
    return worldPos.xyz / worldPos.w;
}

[numthreads(8, 8, 1)]
void TestReconstruction(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _ScreenWidth || id.y >= _ScreenHeight)
        return;

    float2 uv = (id.xy + 0.5) / float2(_ScreenWidth, _ScreenHeight);
    float depth = _CameraDepthTexture.Load(int3(id.xy, 0));

    float3 worldPos = ReconstructWorldPosition(uv, depth);

    uint index = id.y * _ScreenWidth + id.x;
    _ReconstructedPositions[index] = worldPos;
}
